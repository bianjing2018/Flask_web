/*
 * Cookies.js - 1.2.1
 * https://github.com/ScottHamper/Cookies
 *
 * This is free and unencumbered software released into the public domain.
 */
(function (global, undefined) {
    'use strict';

    var factory = function (window) {
        if (typeof window.document !== 'object') {
            throw new Error('Cookies.js requires a `window` with a `document` object');
        }

        var Cookies = function (key, value, options) {
            return arguments.length === 1 ?
                Cookies.get(key) : Cookies.set(key, value, options);
        };

        // Allows for setter injection in unit tests
        Cookies._document = window.document;

        // Used to ensure cookie keys do not collide with
        // built-in `Object` properties
        Cookies._cacheKeyPrefix = 'cookey.'; // Hurr hurr, :)

        Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');

        Cookies.defaults = {
            path: '/',
            secure: false
        };

        Cookies.get = function (key) {
            if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {
                Cookies._renewCache();
            }

            return Cookies._cache[Cookies._cacheKeyPrefix + key];
        };

        Cookies.set = function (key, value, options) {
            options = Cookies._getExtendedOptions(options);
            options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);

            Cookies._document.cookie = Cookies._generateCookieString(key, value, options);

            return Cookies;
        };

        Cookies.expire = function (key, options) {
            return Cookies.set(key, undefined, options);
        };

        Cookies._getExtendedOptions = function (options) {
            return {
                path: options && options.path || Cookies.defaults.path,
                domain: options && options.domain || Cookies.defaults.domain,
                expires: options && options.expires || Cookies.defaults.expires,
                secure: options && options.secure !== undefined ?  options.secure : Cookies.defaults.secure
            };
        };

        Cookies._isValidDate = function (date) {
            return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());
        };

        Cookies._getExpiresDate = function (expires, now) {
            now = now || new Date();

            if (typeof expires === 'number') {
                expires = expires === Infinity ?
                    Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000);
            } else if (typeof expires === 'string') {
                expires = new Date(expires);
            }

            if (expires && !Cookies._isValidDate(expires)) {
                throw new Error('`expires` parameter cannot be converted to a valid Date instance');
            }

            return expires;
        };

        Cookies._generateCookieString = function (key, value, options) {
            key = key.replace(/[^#$&+\^`|]/g, encodeURIComponent);
            key = key.replace(/\(/g, '%28').replace(/\)/g, '%29');
            value = (value + '').replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent);
            options = options || {};

            var cookieString = key + '=' + value;
            cookieString += options.path ? ';path=' + options.path : '';
            cookieString += options.domain ? ';domain=' + options.domain : '';
            cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';
            cookieString += options.secure ? ';secure' : '';

            return cookieString;
        };

        Cookies._getCacheFromString = function (documentCookie) {
            var cookieCache = {};
            var cookiesArray = documentCookie ? documentCookie.split('; ') : [];

            for (var i = 0; i < cookiesArray.length; i++) {
                var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);

                if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {
                    cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value;
                }
            }

            return cookieCache;
        };

        Cookies._getKeyValuePairFromCookieString = function (cookieString) {
            // "=" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`
            var separatorIndex = cookieString.indexOf('=');

            // IE omits the "=" when the cookie value is an empty string
            separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;

            return {
                key: decodeURIComponent(cookieString.substr(0, separatorIndex)),
                value: decodeURIComponent(cookieString.substr(separatorIndex + 1))
            };
        };

        Cookies._renewCache = function () {
            Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);
            Cookies._cachedDocumentCookie = Cookies._document.cookie;
        };

        Cookies._areEnabled = function () {
            var testKey = 'cookies.js';
            var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';
            Cookies.expire(testKey);
            return areEnabled;
        };

        Cookies.enabled = Cookies._areEnabled();

        return Cookies;
    };

    var cookiesExport = typeof global.document === 'object' ? factory(global) : factory;

    // AMD support
    if (typeof define === 'function' && define.amd) {
        define(function () { return cookiesExport; });
        // CommonJS/Node.js support
    } else if (typeof exports === 'object') {
        // Support Node.js specific `module.exports` (which can be a function)
        if (typeof module === 'object' && typeof module.exports === 'object') {
            exports = module.exports = cookiesExport;
        }
        // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)
        exports.Cookies = cookiesExport;
    } else {
        global.Cookies = cookiesExport;
    }
})(typeof window === 'undefined' ? this : window);
var TimeCampAnalytics;
(function (TimeCampAnalytics) {
    var Info = (function () {
        function Info() {
        }
        Info.GetScrollTop = function () {
            return window.pageYOffset || document.documentElement.scrollTop;
        };
        Info.GetWindowHeight = function () {
            return window.innerHeight;
        };
        // http://stackoverflow.com/questions/10730362/get-cookie-by-name
        Info.GetCookie = function (name) {
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length == 2) {
                return parts.pop().split(";").shift();
            }
        };
        return Info;
    })();
    TimeCampAnalytics.Info = Info;
})(TimeCampAnalytics || (TimeCampAnalytics = {}));
/// <reference path="Info.ts"/>
var TimeCampAnalytics;
(function (TimeCampAnalytics) {
    var Parameter = (function () {
        function Parameter(name, value, call) {
            this.name = name;
            this.value = value;
            this.call = call;
        }
        return Parameter;
    })();
    TimeCampAnalytics.Parameter = Parameter;
    var Pinger = (function () {
        function Pinger(url, minWaitInMs) {
            this.url = url;
            this.minWaitInMs = minWaitInMs;
            this.parameters = new Array();
        }
        Pinger.prototype.Fire = function () {
            if (this.minWaitInMs == undefined) {
                this.LoadUrl();
            }
            else {
                var now = new Date();
                if (this.lastCall == undefined ||
                    (now.valueOf() - this.lastCall.valueOf()) > this.minWaitInMs) {
                    this.LoadUrl();
                }
            }
        };
        Pinger.prototype.SetParameter = function (p) {
            this.parameters[p.name] = p;
        };
        Pinger.prototype.ConstructUrl = function (url) {
            url +=
                '?cacheBreaker=' + Math.random();
            for (var key in this.parameters) {
                var p = this.parameters[key];
                url += '&' + p.name + '=' + (p.call ? p.value() : p.value);
            }
            return url;
        };
        Pinger.prototype.LoadUrl = function () {
            var img = new Image();
            img.src = this.ConstructUrl(this.url);
            //console.log(img);
            //console.log(new Date());
            this.lastCall = new Date();
        };
        return Pinger;
    })();
    TimeCampAnalytics.Pinger = Pinger;
})(TimeCampAnalytics || (TimeCampAnalytics = {}));
/// <reference path="../modules/Info.ts"/>

/// <reference path="../settings/default.ts"/>
var TimeCampAnalytics;
(function (TimeCampAnalytics) {
    var COOKIE_DOMAIN = '.timecamp.com';
    TimeCampAnalytics.base = 'https://www.timecamp.com/ajax/lead_save_event/';
    // TimeCampAnalytics.base = 'http://localhost:8080/ajax/lead_save_event/';

    var referer = document.referrer;

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    var utm_source = getParameterByName('utm_source');
    var utm_medium = getParameterByName('utm_medium');
    var utm_campaign = getParameterByName('utm_campaign');
    var utm_term = getParameterByName('utm_term');
    var utm_content = getParameterByName('utm_content');
    var utm = utm_medium + " " + utm_campaign + " " + utm_term + " " + utm_content;
    utm = utm.trim();
    if (Cookies) {
        var currentCookieValue = Cookies.get('referer2');
        if (currentCookieValue) {
            // Ensure the cookie is set to proper domain
            Cookies.set('referer2', currentCookieValue, { expires: Infinity, domain: COOKIE_DOMAIN });
        }
    }
    if (utm_source != "") {
        if (Cookies) {
            if (Cookies.get('referer2') == null) {
                Cookies.set('referer2', utm_source, { expires: Infinity, domain: COOKIE_DOMAIN });
            }
        }
        var referrerPinger = new TimeCampAnalytics.Pinger(TimeCampAnalytics.base);
        referrerPinger.SetParameter(new TimeCampAnalytics.Parameter('type', 'referral', false));
        referrerPinger.SetParameter(new TimeCampAnalytics.Parameter('desc', utm_source, false));
        referrerPinger.SetParameter(new TimeCampAnalytics.Parameter('extra', utm, false)); //t
        referrerPinger.Fire();
    } else if (referer != "") {
        if (Cookies) {
            if (Cookies.get('referer2') == null) {
                Cookies.set('referer2', referer, { expires: Infinity, domain: COOKIE_DOMAIN });
            }
        }
        var referrerPinger = new TimeCampAnalytics.Pinger(TimeCampAnalytics.base);
        referrerPinger.SetParameter(new TimeCampAnalytics.Parameter('type', 'referral', false));
        referrerPinger.SetParameter(new TimeCampAnalytics.Parameter('desc', referer, false));
        referrerPinger.Fire();
    }
})(TimeCampAnalytics || (TimeCampAnalytics = {}));

/// <reference path="../modules/Pinger.ts"/>
var TimeCampAnalytics;
(function (TimeCampAnalytics) {
    function getUrl() {
        var host = window.location.pathname;
        if (window.location.hostname != 'www.timecamp.com' && window.location.hostname != 'timecamp.com')
            host = window.location.hostname + window.location.pathname;
        return host;
    }
    TimeCampAnalytics.parameterScrollTop = new TimeCampAnalytics.Parameter('st', TimeCampAnalytics.Info.GetScrollTop, true);
    TimeCampAnalytics.parameterWindowHeight = new TimeCampAnalytics.Parameter('h', TimeCampAnalytics.Info.GetWindowHeight, true);
    TimeCampAnalytics.parameterTimeCampType = new TimeCampAnalytics.Parameter('type', 'url', false);
    TimeCampAnalytics.parameterTimeCampDesc = new TimeCampAnalytics.Parameter('desc', getUrl, true);
    TimeCampAnalytics.parameterTimeCampExperiment = new TimeCampAnalytics.Parameter('e', TimeCampAnalytics.Info.GetCookie('tc_experiment_group'), false);
})(TimeCampAnalytics || (TimeCampAnalytics = {}));
/// <reference path="../settings/default.ts"/>
var TimeCampAnalytics;
(function (TimeCampAnalytics) {
    var loadPinger = new TimeCampAnalytics.Pinger(TimeCampAnalytics.base);
    loadPinger.SetParameter(TimeCampAnalytics.parameterTimeCampType);
    loadPinger.SetParameter(TimeCampAnalytics.parameterTimeCampDesc);
    setTimeout(function (){
        loadPinger.Fire();
    }, 1000);
})(TimeCampAnalytics || (TimeCampAnalytics = {}));
